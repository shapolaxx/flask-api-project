name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout код
      uses: actions/checkout@v4
    
    - name: Установка Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Кэширование зависимостей
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Установка зависимостей
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Запуск линтера
      run: |
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Запуск тестов
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Проверка покрытия кода
      run: |
        pip install coverage
        coverage run -m pytest
        coverage report --show-missing

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout код
      uses: actions/checkout@v4
    
    - name: Установка Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Проверка безопасности зависимостей
      run: |
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r app/ -f json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout код
      uses: actions/checkout@v4
    
    - name: Установка Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Логин в Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Сборка и пуш Docker образа
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/flask-api:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/flask-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Деплой на сервер
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/flask-api:latest
          docker stop flask-api || true
          docker rm flask-api || true
          docker run -d --name flask-api \
            -p 5000:5000 \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/flask-api:latest

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Уведомление о результате
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Деплой успешно выполнен!"
        else
          echo "❌ Деплой завершился с ошибкой"
          exit 1
        fi